@startuml Mastermind
class Mastermind{
  + start()
  - isResumed()
}
Mastermind *--> Game
class Game{
    ~ MAX_ATTEMPS : int
    - WINS
    - Result : int[][]
    + proposedCombinations : ProposedCombination[]
    + play()
    - showPreviousAttempts()
    - finalResult() :String
}
Game *--> SecretCombination
Game *--> "0..10" ProposedCombination

abstract class Combination{
    ~ MAX_COLORS : int
    + Code : String
    + CharCode : Char[]
    {abstract} + show()
}
Combination *--> "4" Color
enum Color{
    RED     "r"
    YELLOW  "y"
    BLUE    "b"
    GREEN   "g"
    PURPLE  "p"
    ORANGE  "o"
    + valueOf(char) : Color
    + valueOf(int) : char
    + getKeyword() : int
}
Combination <|-- SecretCombination
Combination <|-- ProposedCombination
Class SecretCombination{
    - setRamdomCombination()
    - isContain(int, char[])
    + isEquals(ProposedCombination)
}
Class ProposedCombination{
    ~ PROPOSE
    ~ WRONG_LENGTH
    ~ WRONG_COLORS
    - getValidCombination() : String
    - inProposedCombination(String) : String
    - isColorOK(String) : boolean
    + getProposedCombination()
    + getAttempt() : String
}

package IO{
    Class Console{
        + input()
        + out()
    }
}
Game ...> Console
Mastermind ...> Console
ProposedCombination ...> Console
@enduml